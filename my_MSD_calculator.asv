function MSDs = my_MSD_calculator(mydata)
x= 1;
pixSize = 0.1;
for i = 1:length(mydata)  
    n=size(mydata(i).coords, 1);
    r_all=[];
    for j = 1:n-1 % i is the frame lag
        r=zeros(n-j,2);
        for k = 1: n-j % n-i is the total number of lags one can calculate for frame lag t
            r(k, 1)=mydata(i).frames(k+j)-mydata(i).frames(k); % convert frame lag to time lag
            dif = (pixSize) *(mydata(i).coords(k+j, :)-mydata(i).coords(k, :));%pixSize/1000 was removed
            r(k, 2)=sum(dif.^2); % sqaure displacement
        end
        r_all(end+1:end+size(r, 1), :)=r;
    end
    MSDs(x).r_all = r_all; % Not yet ready to implement
            x = x+1; 
    disp(i); 
end

% MSD_analyzer - the once master function
% FIRST! calculate the MSD
for i = 1:length(mydata)
    tau = mydata(i).timestep/1000;
    d = mydata(i).r_all;
% set up some empty matrices...
    d_all = [];


% calculates ALL displacements
% % for i = 1:size(mydata(k).frames, 1)
% %     if length(mydata(k).frames) > 1
% % %         d = TrajDispl(coords(:, 1), frames, pixSize);
% %         d_all(end+1:end+size(d, 1), :) = d;
% %     end
% % end

    time_lags = unique(d(:, 1));
    n=size(mydata(i).coords, 1);
    D_all = zeros(n-1,5);
% finds the mean displacement squared from above displacements
    for j = 1:n-1
        ind=find(d(:, 1) == time_lags(j));
        D_all(j, 1) = tau * time_lags(j); % converts to real time lag
        D_all(j, 2) = mean(d(ind, 2)); %MSD in x-direction for timelag i
% %         D_all(i, 3) = std(d(ind, 2))/sqrt(length(ind)); %sem in x-direction for timelag i***********************************D13 
% %         D_all(i, 4) = std(d(ind, 2)); % std
        D_all(j, 5) = length(d(ind, 2)); % num points
    end
    mydata(i).MSD = D_all;
    disp(i)
% MSD = D_all;
% out(k).MSD = MSD;
end


% calculate fits
for i = 1: length(mydata)
MSD = mydata(i).MSD;
record_this = zeros(size(mydata(i).coords, 1)-1);
record_that = zeros(size(mydata(i).coords, 1)-1);
    for j = 3:size(mydata(i).coords, 1)-1
    xx = MSD(1:j, 1);
    yy = MSD(1:j, 2);
    mdl = fitlm(xx,yy);
    record_this(j) = mdl.Rsquared.Ordinary;
    record_that(j) = mdl.Coefficients.pValue(2);
    end
disp(i)
mydata(i).rsquared = record_this;
mydata(i).pvalue = record_that;
end

end
